//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""camera"",
            ""id"": ""8220334f-0cbc-4dae-a0a9-d0917ca4744b"",
            ""actions"": [
                {
                    ""name"": ""orbit"",
                    ""type"": ""Value"",
                    ""id"": ""33d48201-2b90-4323-b6fe-23131bc66282"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""zoom"",
                    ""type"": ""Value"",
                    ""id"": ""f041c016-e837-4459-862a-59737fdf32cd"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""cd901c1d-dc00-42ec-a516-ae7d3672be57"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""orbit"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""10f36108-4213-491b-9b6f-3dbffe70fb78"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""orbit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2356e695-71a4-4d83-9b84-79e64256b93b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""orbit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""44408515-3a55-4fe8-92fb-5b3c1e055c78"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""orbit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5ac5096a-1b8c-47e3-94f7-18afacf1d160"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""orbit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0e1494aa-a6c0-4cd7-8d61-892dcf016d7d"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""player"",
            ""id"": ""8a6db0e9-2605-4497-b037-f3ae678ea9b3"",
            ""actions"": [
                {
                    ""name"": ""click"",
                    ""type"": ""Button"",
                    ""id"": ""073f799d-b5ac-4686-97bd-376b928af667"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""move"",
                    ""type"": ""Value"",
                    ""id"": ""cca14e45-cf25-487e-8ba7-15eafe2b4924"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4f08800b-205d-4293-b4bd-402c22ed1eda"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a4aec6d7-80be-49e7-b6ff-c097eed0dd36"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""inventory"",
            ""id"": ""8355ef86-9dc7-43a4-8341-e5ae57b94c90"",
            ""actions"": [
                {
                    ""name"": ""select"",
                    ""type"": ""Button"",
                    ""id"": ""bc786fec-9f01-418f-b1ca-3da20ab1860c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""options"",
                    ""type"": ""Button"",
                    ""id"": ""99630a9c-8fcb-4bcd-b4d3-9c9f319b4538"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""88603ec4-0c20-4b9d-b119-d862b03ebf36"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fa21307f-a3fe-4ec3-ba2d-873724d584af"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""options"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // camera
        m_camera = asset.FindActionMap("camera", throwIfNotFound: true);
        m_camera_orbit = m_camera.FindAction("orbit", throwIfNotFound: true);
        m_camera_zoom = m_camera.FindAction("zoom", throwIfNotFound: true);
        // player
        m_player = asset.FindActionMap("player", throwIfNotFound: true);
        m_player_click = m_player.FindAction("click", throwIfNotFound: true);
        m_player_move = m_player.FindAction("move", throwIfNotFound: true);
        // inventory
        m_inventory = asset.FindActionMap("inventory", throwIfNotFound: true);
        m_inventory_select = m_inventory.FindAction("select", throwIfNotFound: true);
        m_inventory_options = m_inventory.FindAction("options", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // camera
    private readonly InputActionMap m_camera;
    private ICameraActions m_CameraActionsCallbackInterface;
    private readonly InputAction m_camera_orbit;
    private readonly InputAction m_camera_zoom;
    public struct CameraActions
    {
        private @PlayerInput m_Wrapper;
        public CameraActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @orbit => m_Wrapper.m_camera_orbit;
        public InputAction @zoom => m_Wrapper.m_camera_zoom;
        public InputActionMap Get() { return m_Wrapper.m_camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void SetCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterface != null)
            {
                @orbit.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnOrbit;
                @orbit.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnOrbit;
                @orbit.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnOrbit;
                @zoom.started -= m_Wrapper.m_CameraActionsCallbackInterface.OnZoom;
                @zoom.performed -= m_Wrapper.m_CameraActionsCallbackInterface.OnZoom;
                @zoom.canceled -= m_Wrapper.m_CameraActionsCallbackInterface.OnZoom;
            }
            m_Wrapper.m_CameraActionsCallbackInterface = instance;
            if (instance != null)
            {
                @orbit.started += instance.OnOrbit;
                @orbit.performed += instance.OnOrbit;
                @orbit.canceled += instance.OnOrbit;
                @zoom.started += instance.OnZoom;
                @zoom.performed += instance.OnZoom;
                @zoom.canceled += instance.OnZoom;
            }
        }
    }
    public CameraActions @camera => new CameraActions(this);

    // player
    private readonly InputActionMap m_player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_player_click;
    private readonly InputAction m_player_move;
    public struct PlayerActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @click => m_Wrapper.m_player_click;
        public InputAction @move => m_Wrapper.m_player_move;
        public InputActionMap Get() { return m_Wrapper.m_player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @click.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnClick;
                @click.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnClick;
                @click.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnClick;
                @move.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @move.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @move.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @click.started += instance.OnClick;
                @click.performed += instance.OnClick;
                @click.canceled += instance.OnClick;
                @move.started += instance.OnMove;
                @move.performed += instance.OnMove;
                @move.canceled += instance.OnMove;
            }
        }
    }
    public PlayerActions @player => new PlayerActions(this);

    // inventory
    private readonly InputActionMap m_inventory;
    private IInventoryActions m_InventoryActionsCallbackInterface;
    private readonly InputAction m_inventory_select;
    private readonly InputAction m_inventory_options;
    public struct InventoryActions
    {
        private @PlayerInput m_Wrapper;
        public InventoryActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @select => m_Wrapper.m_inventory_select;
        public InputAction @options => m_Wrapper.m_inventory_options;
        public InputActionMap Get() { return m_Wrapper.m_inventory; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InventoryActions set) { return set.Get(); }
        public void SetCallbacks(IInventoryActions instance)
        {
            if (m_Wrapper.m_InventoryActionsCallbackInterface != null)
            {
                @select.started -= m_Wrapper.m_InventoryActionsCallbackInterface.OnSelect;
                @select.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.OnSelect;
                @select.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.OnSelect;
                @options.started -= m_Wrapper.m_InventoryActionsCallbackInterface.OnOptions;
                @options.performed -= m_Wrapper.m_InventoryActionsCallbackInterface.OnOptions;
                @options.canceled -= m_Wrapper.m_InventoryActionsCallbackInterface.OnOptions;
            }
            m_Wrapper.m_InventoryActionsCallbackInterface = instance;
            if (instance != null)
            {
                @select.started += instance.OnSelect;
                @select.performed += instance.OnSelect;
                @select.canceled += instance.OnSelect;
                @options.started += instance.OnOptions;
                @options.performed += instance.OnOptions;
                @options.canceled += instance.OnOptions;
            }
        }
    }
    public InventoryActions @inventory => new InventoryActions(this);
    public interface ICameraActions
    {
        void OnOrbit(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
    }
    public interface IPlayerActions
    {
        void OnClick(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IInventoryActions
    {
        void OnSelect(InputAction.CallbackContext context);
        void OnOptions(InputAction.CallbackContext context);
    }
}
